<?php
 include_once "./portable-utf8.php"; include_once "./PasswordHash.php"; class Sanity { const MIN_LENGTH = "MIN_LENGTH"; const MAX_LENGTH = "MAX_LENGTH"; const COMPLEXITY_REQUIRED = "COMPLEXITY_REQUIRED"; const ALLOW_WHITESPACES = "ALLOW_WHITESPACES"; const ALLOW_SYMBOLS = "ALLOW_SYMBOLS"; const ALLOW_NUMBERS = "ALLOW_NUMBERS"; const IGNORE_CASE = "IGNORE_CASE"; const UPPER_COUNT = "UPPER"; const LOWER_COUNT = "LOWER"; const NUMBER_COUNT = "NUMBER"; const SYMBOL_COUNT = "SYMBOL"; const WHITESPACES_COUNT = "WHITESPACES"; const REQUIRED_GROUPS = "REQUIRED_GROUPS"; const DISALLOWED_LIST = "DISALLOWED"; const DEBUG = "DEBUG"; private static $DEFAULT_RULES = array( self::MIN_LENGTH => 8, self::MAX_LENGTH => -1, self::ALLOW_WHITESPACES => 1, self::ALLOW_SYMBOLS => 1, self::ALLOW_NUMBERS => 1, self::IGNORE_CASE => 0, self::COMPLEXITY_REQUIRED => 3, self::REQUIRED_GROUPS => array( self::UPPER_COUNT => 2, self::LOWER_COUNT => 2, self::NUMBER_COUNT => 2, self::SYMBOL_COUNT => 2, self::WHITESPACES_COUNT => 2, ), self::DISALLOWED_LIST => array(), self::DEBUG => false, ); private static $RULE_IN_USE = array(); private static $SAVED_RULES = array(); private static $debug_info = array(); private function __construct() { } public static function configure($conf = array(), $ruleName = null) { $backup_rules = null; if (isset($ruleName)) { $backup_rules = self::$DEFAULT_RULES; if (array_key_exists($ruleName, self::$SAVED_RULES)) { self::$DEFAULT_RULES = self::$SAVED_RULES[$ruleName]; } } if (isset($conf[self::MIN_LENGTH])) { self::$DEFAULT_RULES[self::MIN_LENGTH] = $conf[self::MIN_LENGTH]; } if (isset($conf[self::MAX_LENGTH])) { self::$DEFAULT_RULES[self::MAX_LENGTH] = $conf[self::MAX_LENGTH]; } if (isset($conf[self::COMPLEXITY_REQUIRED])) { self::$DEFAULT_RULES[self::COMPLEXITY_REQUIRED] = $conf[self::COMPLEXITY_REQUIRED]; } if (isset($conf[self::ALLOW_WHITESPACES])) { self::$DEFAULT_RULES[self::ALLOW_WHITESPACES] = $conf[self::ALLOW_WHITESPACES]; } if (isset($conf[self::ALLOW_NUMBERS])) { self::$DEFAULT_RULES[self::ALLOW_NUMBERS] = $conf[self::ALLOW_NUMBERS]; } if (isset($conf[self::ALLOW_SYMBOLS])) { self::$DEFAULT_RULES[self::ALLOW_SYMBOLS] = $conf[self::ALLOW_SYMBOLS]; } if (isset($conf[self::IGNORE_CASE])) { self::$DEFAULT_RULES[self::IGNORE_CASE] = $conf[self::IGNORE_CASE]; } if (isset($conf[self::UPPER_COUNT])) { self::$DEFAULT_RULES[self::REQUIRED_GROUPS][self::UPPER_COUNT] = $conf[self::UPPER_COUNT]; } if (isset($conf[self::LOWER_COUNT])) { self::$DEFAULT_RULES[self::REQUIRED_GROUPS][self::LOWER_COUNT] = $conf[self::LOWER_COUNT]; } if (isset($conf[self::NUMBER_COUNT])) { self::$DEFAULT_RULES[self::REQUIRED_GROUPS][self::NUMBER_COUNT] = $conf[self::NUMBER_COUNT]; } if (isset($conf[self::SYMBOL_COUNT])) { self::$DEFAULT_RULES[self::REQUIRED_GROUPS][self::SYMBOL_COUNT] = $conf[self::SYMBOL_COUNT]; } if (isset($conf[self::WHITESPACES_COUNT])) { self::$DEFAULT_RULES[self::REQUIRED_GROUPS][self::WHITESPACES_COUNT] = $conf[self::WHITESPACES_COUNT]; } if (isset($conf[self::DISALLOWED_LIST])) { self::$DEFAULT_RULES[self::DISALLOWED_LIST] = $conf[self::DISALLOWED_LIST]; } if (isset($conf[self::DEBUG])) { self::$DEFAULT_RULES[self::DEBUG] = $conf[self::DEBUG]; } if (isset($conf)) { if (isset($ruleName)) { if (array_key_exists($ruleName, self::$SAVED_RULES)) { self::$SAVED_RULES[$ruleName] = self::$DEFAULT_RULES; } else { self::$SAVED_RULES = array_merge(self::$SAVED_RULES, array($ruleName => self::$DEFAULT_RULES)); } self::$DEFAULT_RULES = $backup_rules; } } } public static function check($input, $ruleName = null) { $input = trim($input); if (isset($ruleName)) { if (array_key_exists($ruleName, self::$SAVED_RULES)) { self::$RULE_IN_USE = self::$SAVED_RULES[$ruleName]; } else { self::d("Rule {$ruleName} doesn't exist. Falling back to default. Check code..."); self::$RULE_IN_USE = self::$DEFAULT_RULES; } } else { self::$RULE_IN_USE = self::$DEFAULT_RULES; } $minLength = self::$RULE_IN_USE[self::MIN_LENGTH]; $maxLength = self::$RULE_IN_USE[self::MAX_LENGTH]; $complexRequired = self::$RULE_IN_USE[self::COMPLEXITY_REQUIRED]; $allowWhiteSpace = self::$RULE_IN_USE[self::ALLOW_WHITESPACES]; $allowSymbol = self::$RULE_IN_USE[self::ALLOW_SYMBOLS]; $allowNumbers = self::$RULE_IN_USE[self::ALLOW_NUMBERS]; $ignoreCase = self::$RULE_IN_USE[self::IGNORE_CASE]; $upperReq = self::$RULE_IN_USE[self::REQUIRED_GROUPS][self::UPPER_COUNT]; $lowerReq = self::$RULE_IN_USE[self::REQUIRED_GROUPS][self::LOWER_COUNT]; $numberReq = self::$RULE_IN_USE[self::REQUIRED_GROUPS][self::NUMBER_COUNT]; $symbolReq = self::$RULE_IN_USE[self::REQUIRED_GROUPS][self::SYMBOL_COUNT]; $whiteSpacesReq = self::$RULE_IN_USE[self::REQUIRED_GROUPS][self::WHITESPACES_COUNT]; $disallowedList = array_values(self::$RULE_IN_USE[self::DISALLOWED_LIST]); if ($ignoreCase) { $inputChars = utf8_split(utf8_strtolower($input)); } else { $inputChars = utf8_split($input); } $inputLen = count($inputChars); if (($minLength >= 1) && ($inputLen < $minLength)) { self::d("Input length {$inputLen} is less than min Length {$minLength}"); return false; } if (($maxLength >= 1) && ($maxLength >= $minLength) && ($inputLen >= $maxLength)) { self::d("Input length is {$inputLen}, which greater than maxlength {$maxLength}"); return false; } $upperCount = 0; $lowerCount = 0; $numberCount = 0; $symbolCount = 0; $whiteSpaceCount = 0; $caseTable = utf8_case_table(); $whiteSpaceTable = array_values(utf8_whitespace_table()); $lowerCharList = array_keys($caseTable); $upperCharList = array_values($caseTable); for ($i = 0; $i < $inputLen; $i++) { $isSymbol = true; if (in_array($inputChars[$i], $lowerCharList, true)) { $lowerCount++; $isSymbol = false; } if (!$ignoreCase) { if (in_array($inputChars[$i], $upperCharList, true)) { $upperCount++; $isSymbol = false; } } if ($inputChars[$i] >= '0' && $inputChars[$i] <= '9') { if ($allowNumbers) { $numberCount++; $isSymbol = false; } else { self::d("Number {$inputChars[$i]} found, but numbers aren't allowed"); return false; } } if (in_array($inputChars[$i], $whiteSpaceTable)) { if ($allowWhiteSpace) { $whiteSpaceCount++; $isSymbol = false; } else { self::d("Found whitespace " . array_search($inputChars[$i], utf8_whitespace_table()) . ", but whitespaces aren't allowed"); return false; } } if ($allowSymbol && $isSymbol) { $symbolCount++; } elseif (!$allowSymbol && $isSymbol) { self::d("Found symbol {$inputChars[$i]}, but symbols aren't allowed"); return false; } } foreach ($disallowedList as $set) { $set = utf8_strtolower(trim($set)); $setChars = utf8_split($set); $setLen = count($setChars); $setIndex = 0; $charFound = false; $consecutiveFound = 0; for ($i = 0; $i < $inputLen; $i++) { if ($setIndex < $setLen) { if (utf8_strtolower($inputChars[$i]) === $setChars[$setIndex]) { if ($charFound) { $consecutiveFound++; if (($setIndex + 1) < $setLen) { $setIndex++; } else { break; } } else { $charFound = true; $consecutiveFound = 1; if (($setIndex + 1) < $setLen) { $setIndex++; } else { break; } } } else { $charFound = false; $consecutiveFound = 0; $setIndex = 0; } } } if ($consecutiveFound == $setLen) { self::d("Input contained disallowed sequence {$set}\n\r<br/>"); return false; } } $complexCount = 0; if ($lowerReq >= 1 && $lowerCount >= $lowerReq) { self::d("Lowercase requirement met"); $complexCount++; } else { self::d("Required lowercase count {$lowerReq} : received {$lowerCount}"); } if ($upperReq >= 1 && $upperCount >= $upperReq) { self::d("Uppercase requirement met"); $complexCount++; } else { self::d("Required uppercase count {$upperReq} : received {$upperCount}"); } if ($numberReq >= 1 && $numberCount >= $numberReq) { self::d("Number requirement met"); $complexCount++; } else { self::d("Required numbers {$numberReq} : received {$numberCount}"); } if ($symbolReq >= 1 && $symbolCount >= $symbolReq) { self::d("Symbol requirement met"); $complexCount++; } else { self::d("Required symbols {$symbolReq} : received {$symbolCount}"); } if ($whiteSpacesReq >= 1 && $whiteSpaceCount >= $whiteSpacesReq) { self::d("Whitespace requirement met"); $complexCount++; } else { self::d("Required whitespaces {$whiteSpacesReq} : received {$whiteSpaceCount}"); } if ($complexCount >= $complexRequired) { return true; } else { self::d("Complexity requirements weren't met:\n\r\t" . "You needed {$complexRequired} groups, but you had {$complexCount}"); return false; } } public static function check_and_hash($input, $ruleName = null) { if (self::check($input, $ruleName)) { return create_hash($input); } else { return false; } } public static function print_default_rules() { foreach (self::$DEFAULT_RULES as $rule => $value) { if (is_array($value)) { echo "{\t}Rule: {$rule}\n\r<br/>"; foreach ($value as $key => $val) { echo "&nbsp;&nbsp;&nbsp;{$key} &nbsp;&nbsp;=> {$val}\n\r<br/>"; } } else { echo "{\t}Rule: {$rule}\t {$value}<br/>"; } } } public static function print_saved_rules() { if (count(self::$SAVED_RULES) > 0) { foreach (self::$SAVED_RULES as $name => $rules) { echo "Rule Name: {$name}<br/>"; foreach ($rules as $rule => $value) { if (is_array($value)) { echo "{\t}Rule: {$rule}\n\r<br/>"; foreach ($value as $key => $val) { echo "&nbsp;&nbsp;&nbsp;{$key} &nbsp;&nbsp;=> {$val}\n\r<br/>"; } } else { echo "{\t}Rule: {$rule}\t {$value}<br/>"; } } echo "<br/>"; } } else { echo "<br/>No saved ruleset<br/>"; } } public static function print_debug_info() { if (self::$RULE_IN_USE[self::DEBUG]) { foreach (self::$debug_info as $msg) { echo "{$msg}\n\r<br/>"; } } } private static function d($msg) { self::$debug_info = array_merge(self::$debug_info, array($msg)); } }
